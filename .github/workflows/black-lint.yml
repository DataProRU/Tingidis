name: Run Tests

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:
    runs-on: ubuntu-latest

    # Устанавливаем переменные окружения
    env:
      SECRET_KEY: "your_super_secret_key_123"  # Замените на ваш токен или используйте GitHub Secrets
      DATABASE_URL: postgresql+asyncpg://testuser:testpass@localhost:5432/testdb
      PYTHON_VERSION: "3.12"

    steps:
      # Шаг 1: Проверка кода
      - name: Checkout code
        uses: actions/checkout@v4

      # Шаг 2: Установка Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Шаг 3: Установка зависимостей
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest  # Установка pytest, если он не в requirements.txt

      # Шаг 4: Установка Black (опционально, для проверки форматирования)
      - name: Install Black
        run: pip install black

      # Шаг 5: Проверка форматирования кода с помощью Black
      - name: Run Black
        run: black --check .

      # Шаг 6: Вывод информации о Python и рабочей директории
      - name: Print Python Path
        run: |
          python -c "import sys; print(sys.path)"

      - name: Print Current Working Directory
        run: |
          pwd
          ls -la

      # Шаг 7: Установка Docker Compose
      - name: Install Docker Compose
        run: |
          curl -L "https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

      # Шаг 8: Запуск приложения с помощью Docker Compose
      - name: Run Application with Docker Compose
        run: docker-compose up --build -d

      # Шаг 9: Ожидание запуска приложения
      - name: Wait for Application to Start
        run: |
          until curl -s http://localhost:8000/health-check; do
            echo "Waiting for application to start..."
            sleep 2
          done

      # Шаг 10: Запуск тестов
      - name: Run Tests
        run: pytest tests
        env:
          SECRET_KEY: ${{ env.SECRET_KEY }}  # Передача SECRET_KEY в окружение тестов
          DATABASE_URL: ${{ env.DATABASE_URL }}

      # Шаг 11: Остановка Docker Compose после завершения тестов
      - name: Stop Docker Compose
        run: docker-compose down